import mongoose from 'mongoose';

const FollowUpSchema = new mongoose.Schema({
  // User Reference
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  
  // Contact Reference
  contactId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Contact',
    required: true
  },
  
  // Related Entity References
  applicationId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Application'
  },
  jobId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Job'
  },
  
  // Follow-up Details
  type: {
    type: String,
    enum: [
      'email',
      'phone_call',
      'linkedin_message',
      'meeting',
      'interview_follow_up',
      'application_follow_up',
      'networking',
      'thank_you',
      'status_inquiry',
      'other'
    ],
    required: true
  },
  
  subject: {
    type: String,
    required: true,
    trim: true
  },
  
  message: {
    type: String,
    trim: true
  },
  
  // Scheduling
  scheduledDate: {
    type: Date,
    required: true
  },
  scheduledTime: {
    type: String, // Format: "HH:MM"
    default: "09:00"
  },
  
  // Status
  status: {
    type: String,
    enum: ['scheduled', 'completed', 'cancelled', 'overdue'],
    default: 'scheduled'
  },
  
  // Completion Details
  completedAt: Date,
  actualOutcome: {
    type: String,
    enum: ['positive', 'neutral', 'negative', 'no_response'],
    default: 'neutral'
  },
  completionNotes: String,
  
  // Next Steps
  nextFollowUpDate: Date,
  nextFollowUpType: {
    type: String,
    enum: [
      'email',
      'phone_call',
      'linkedin_message',
      'meeting',
      'interview_follow_up',
      'application_follow_up',
      'networking',
      'thank_you',
      'status_inquiry',
      'other'
    ]
  },
  nextFollowUpNotes: String,
  
  // Priority
  priority: {
    type: String,
    enum: ['low', 'medium', 'high', 'urgent'],
    default: 'medium'
  },
  
  // Automation
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  autoGenerationRule: String,
  
  // Reminders
  reminders: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Reminder'
  }],
  
  // Templates Used
  templateUsed: String,
  
  // Tracking
  tags: [String],
  
  // Communication Channel Details
  channelDetails: {
    emailAddress: String,
    phoneNumber: String,
    linkedInProfile: String,
    meetingLink: String,
    platform: String
  }
}, {
  timestamps: true
});

// Indexes
FollowUpSchema.index({ userId: 1, status: 1 });
FollowUpSchema.index({ userId: 1, scheduledDate: 1 });
FollowUpSchema.index({ contactId: 1, status: 1 });
FollowUpSchema.index({ applicationId: 1 });
FollowUpSchema.index({ scheduledDate: 1, status: 1 });

export const FollowUp = mongoose.models.FollowUp || mongoose.model('FollowUp', FollowUpSchema);
export default FollowUp;