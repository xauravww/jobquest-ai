import mongoose from 'mongoose';

const FollowUpHistorySchema = new mongoose.Schema({
  // User Reference
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  
  // Contact Reference
  contactId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Contact',
    required: true
  },
  
  // Related Follow-up Reference
  followUpId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'FollowUp'
  },
  
  // Related Entity References
  applicationId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Application'
  },
  jobId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Job'
  },
  
  // Communication Details
  date: {
    type: Date,
    required: true,
    default: Date.now
  },
  
  type: {
    type: String,
    enum: [
      'email',
      'phone_call',
      'linkedin_message',
      'meeting',
      'interview_follow_up',
      'application_follow_up',
      'networking',
      'thank_you',
      'status_inquiry',
      'other'
    ],
    required: true
  },
  
  subject: {
    type: String,
    required: true,
    trim: true
  },
  
  // Communication Content
  message: {
    type: String,
    trim: true
  },
  
  // Outcome & Results
  outcome: {
    type: String,
    enum: ['positive', 'neutral', 'negative', 'no_response'],
    default: 'neutral'
  },
  
  notes: {
    type: String,
    trim: true
  },
  
  // Response Details
  responseReceived: {
    type: Boolean,
    default: false
  },
  responseDate: Date,
  responseContent: String,
  responseOutcome: {
    type: String,
    enum: ['positive', 'neutral', 'negative'],
    default: 'neutral'
  },
  
  // Next Steps
  nextSteps: {
    type: String,
    trim: true
  },
  nextFollowUpScheduled: {
    type: Boolean,
    default: false
  },
  nextFollowUpDate: Date,
  
  // Communication Channel Details
  channelDetails: {
    emailAddress: String,
    phoneNumber: String,
    linkedInProfile: String,
    meetingLink: String,
    platform: String,
    duration: Number // in minutes for calls/meetings
  },
  
  // Attachments & Documents
  attachments: [{
    name: String,
    url: String,
    type: {
      type: String,
      enum: ['resume', 'cover_letter', 'portfolio', 'document', 'image', 'other']
    },
    size: Number
  }],
  
  // Tracking
  tags: [String],
  
  // Automation
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  automationSource: String,
  
  // Performance Metrics
  metrics: {
    openRate: Number, // for emails
    clickRate: Number, // for emails with links
    responseTime: Number, // in hours
    engagementScore: Number // 1-10 scale
  }
}, {
  timestamps: true
});

// Indexes
FollowUpHistorySchema.index({ userId: 1, date: -1 });
FollowUpHistorySchema.index({ contactId: 1, date: -1 });
FollowUpHistorySchema.index({ followUpId: 1 });
FollowUpHistorySchema.index({ applicationId: 1 });
FollowUpHistorySchema.index({ userId: 1, type: 1 });
FollowUpHistorySchema.index({ date: -1, outcome: 1 });

export const FollowUpHistory = mongoose.models.FollowUpHistory || mongoose.model('FollowUpHistory', FollowUpHistorySchema);
export default FollowUpHistory;